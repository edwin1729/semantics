import Mathlib.Topology.Sober
import Mathlib.Topology.Order.Category.FrameAdjunction
import Mathlib.Topology.Category.Locale
import Mathlib.Topology.Homeomorph
import Mathlib.Topology.Specialization
import Mathlib.Topology.Order.ScottTopology
import Lean.Parser.Tactic
import Mathlib.Topology.Sets.Opens

import Semantics.Defs
import Semantics.TopologicalBasis

set_option autoImplicit false
open Locale TopCat CategoryTheory TopologicalSpace

def Sober (X : TopCat): Prop := QuasiSober X ‚àß T0Space X

/-- Alternative definitions of Sober. Equivalence assumed -/
def adjunctionHomeomorphism {X: TopCat} : IsHomeomorph (adjunctionTopToLocalePT.unit.app X)
    ‚Üî Sober X := by sorry

variable {D : Type*} [AlgebraicDCPO D]

/-- Scott Topology on AlgebraicDCPO D -/
instance : TopologicalSpace D := Topology.scott D {d | DirectedOn (¬∑ ‚â§ ¬∑) d}

/-- We claim that x is entirely determined by its set of basic opens `K x`.
    Proving this correspondence establishes the homeomorphism below. -/
abbrev K (x: PT (Opens D)) := { c | ‚àÉ hc: c ‚àà ùïÇ D, x <| open_of_compact c hc }

/-- Could add this to Mathlib. Lean's automation can prove this easily enough if a simp [map_sSup, sSup_Prop_eq].
    But I think using this lemma improves readability -/
lemma of_completelyPrime  {P: Opens D ‚Üí Prop} {x: PT (Opens D)} : (x (sSup {u | P u})) ‚Üî ‚àÉ u, P u ‚àß x u := by
  simp only [map_sSup, sSup_Prop_eq]
  constructor
  ¬∑ rintro ‚ü®h, ‚ü®h2, h3, h4‚ü©, h5‚ü©
    use h2
    subst h4
    exact ‚ü®h3, h5‚ü©
  ¬∑ rintro ‚ü®u, hu, hxu‚ü©
    use x u
    simp only [Set.mem_image, Set.mem_setOf_eq, eq_iff_iff]
    constructor
    ¬∑ use u
    ¬∑ exact hxu

--lemma of_completelyPrime {x: PT (Opens D)} {P: Opens D ‚Üí Prop} : (x (sSup {u | P u})) ‚Üî ‚àÉ u, P u ‚àß x u := by
--
--  u = sSup ({ o | ‚àÉ (c: Œ±) (hc: c ‚àà ùïÇ Œ±), (o = (open_of_compact c hc)) ‚àß c·µò ‚äÜ u}) := by

lemma directed_K‚Çì (x: PT (Opens D)) : DirectedOn (¬∑ ‚â§ ¬∑) (K x) := by
  rintro c ‚ü®hc‚ÇÄ, hc‚ÇÅ‚ü© d ‚ü®hd‚ÇÄ, hd‚ÇÅ‚ü©
  let inf := (open_of_compact c hc‚ÇÄ) ‚äì (open_of_compact d hd‚ÇÄ)
  have inf_in_x : x inf := by
    simp only [map_inf, inf]
    exact ‚ü®hc‚ÇÅ, hd‚ÇÅ‚ü©

  have this := by
    rw [open_eq_open_of_basis' inf] at inf_in_x
    exact of_completelyPrime.1 inf_in_x
  obtain ‚ü®_, ‚ü®e, he‚ÇÄ, he'‚ÇÄ, he'‚ÇÅ‚ü©, he'‚ÇÇ‚ü© := this

  rw [he'‚ÇÅ] at he'‚ÇÇ
  use e
  constructor
  ¬∑ simp only [Set.mem_setOf_eq, inf]
    exact ‚ü®he‚ÇÄ, he'‚ÇÇ‚ü©
  ¬∑ simp only [inf]
    simp [inf, open_of_compact] at he'‚ÇÄ
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := he'‚ÇÄ
    exact ‚ü®le_of_forall_ge h‚ÇÅ, le_of_forall_ge h‚ÇÇ‚ü©

-- TODO maybe this lemma is already in mathlib if i use `Ici`, Mathlib's version of upperSet
lemma le_iff_ge_upperSet {Œ±: Type*} (c e : Œ±) [Preorder Œ±] : c ‚â§ e ‚Üî e·µò ‚äÜ c·µò := by
  simp [upperSet]
  constructor
  ¬∑ intro hec x hxc
    exact Preorder.le_trans c e x hec hxc
  ¬∑ intro x
    apply x e
    rfl

theorem scottIsSober : Sober (@TopCat.of D (Topology.scott D {d | DirectedOn (¬∑ ‚â§ ¬∑) d})) := by
  apply adjunctionHomeomorphism.1
  -- #check (adjunctionTopToLocalePT.unit.app X)
  -- have : X ‚âÉ‚Çú ((topToLocale ‚ãô pt).obj X) := sorry
  constructor
  ¬∑ -- continuity obtained since we have a morphism in the category of topological spaces
    -- should have been quite easy to prove...
    sorry
  ¬∑ -- Open Map
    sorry
  ¬∑ -- Bijective
    constructor
    ¬∑ -- Injective
      -- change Function.Injective (Œª _ ‚Üí _)--(Œª (d: X) ‚Üí {U | IsOpen U ‚àß d ‚àà U}))
      #check ‚áë(ConcreteCategory.hom (adjunctionTopToLocalePT.unit.app (TopCat.of D)))
      change Function.Injective ‚áë(ConcreteCategory.hom (adjunctionTopToLocalePT.unit.app (TopCat.of D)))
      -- have t0 : T0Space Y := sorry

      intro d e hde
      let d' := (ConcreteCategory.hom (adjunctionTopToLocalePT.unit.app (TopCat.of D))) d
      let e' := (ConcreteCategory.hom (adjunctionTopToLocalePT.unit.app (TopCat.of D))) e
      have foo := Specialization (‚Üë(TopCat.of D))
      -- apply le_antisymm_iff at hde
      sorry
    ¬∑ -- Surjective
      intro x
      simp only [Functor.comp_obj] at x
      dsimp [pt, PT] at x
      let K‚Çì := K x
      let inp := sSup K‚Çì
      use inp
      dsimp only [Functor.id_obj, Functor.comp_obj, topToLocale_obj, adjunctionTopToLocalePT,
        topCatOpToFrm_obj_coe, hom_ofHom]
      apply FrameHom.ext
      intro u
      dsimp only [topCatOpToFrm_obj_coe] at u
      simp only [eq_iff_iff]
      change sSup K‚Çì ‚àà u ‚Üî x u

      calc
        _ ‚Üî sSup K‚Çì ‚àà u.carrier := by rfl
        _ ‚Üî sSup K‚Çì ‚àà ‚ãÉ‚ÇÄ (upperSet '' { e ‚àà ùïÇ D | e·µò ‚äÜ u}) := by
          nth_rewrite 1 [open_eq_open_of_basis u.carrier u.isOpen]
          rfl
        _ ‚Üî ‚àÉ e ‚àà ùïÇ D, e·µò ‚äÜ u ‚àß e ‚â§ sSup K‚Çì := by
          constructor
          ¬∑ rintro ‚ü®e', he'‚ÇÄ, he'‚ÇÅ‚ü©
            simp only [Set.mem_image, Set.mem_setOf_eq] at he'‚ÇÄ
            choose e he‚ÇÅ he‚ÇÇ using he'‚ÇÄ
            use e
            simp only [‚Üê he‚ÇÇ, upperSet, Set.mem_setOf_eq] at he'‚ÇÅ
            exact ‚ü®he‚ÇÅ.1, he‚ÇÅ.2, he'‚ÇÅ‚ü©
          ¬∑ rintro ‚ü®e, he‚ÇÄ, he‚ÇÅ, he‚ÇÇ‚ü©
            have he'‚ÇÄ : e·µò ‚àà (upperSet '' {c | c ‚àà ùïÇ D ‚àß c·µò ‚äÜ u}) := by
              simp only [Set.mem_image, Set.mem_setOf_eq]
              use e
            apply Set.subset_sUnion_of_mem at he'‚ÇÄ
            have he‚ÇÇ : sSup K‚Çì ‚àà e·µò := by aesop
            exact Set.mem_of_mem_of_subset he‚ÇÇ he'‚ÇÄ
        _ ‚Üî ‚àÉ (e c : D), c ‚àà K‚Çì ‚àß e ‚àà ùïÇ D  ‚àß e·µò ‚äÜ u ‚àß e ‚â§ c := by
            constructor
            ¬∑ rintro ‚ü®e, he‚ÇÄ, he'‚ÇÄ, he‚ÇÅ‚ü©
              use e
              choose c hc‚ÇÅ hc‚ÇÇ using he‚ÇÄ K‚Çì (directed_K‚Çì x) he‚ÇÅ
              use c
            ¬∑ rintro ‚ü®e, c, hc‚ÇÄ, he‚ÇÄ, he'‚ÇÄ, e_le_c‚ü©
              use e
              have he‚ÇÅ : e ‚â§ sSup K‚Çì := by
                trans c
                ¬∑ assumption
                ¬∑ have sSup_is_LUB := CompletePartialOrder.lubOfDirected K‚Çì (directed_K‚Çì x)
                  exact sSup_is_LUB.1 hc‚ÇÄ
              exact ‚ü®he‚ÇÄ, he'‚ÇÄ, he‚ÇÅ‚ü©
        _ ‚Üî ‚àÉ (e c : D) (hc: c ‚àà ùïÇ D), e ‚àà ùïÇ D ‚àß e·µò ‚äÜ u ‚àß c·µò ‚äÜ e·µò ‚àß x (open_of_compact c hc) := by
          constructor
          ¬∑ rintro ‚ü®e, c, ‚ü®hc‚ÇÄ, hc‚ÇÅ‚ü©, he‚ÇÄ, he‚ÇÅ, e_le_c‚ü©
            use e; use c; use hc‚ÇÄ
            exact ‚ü®he‚ÇÄ, he‚ÇÅ, by rwa [‚Üê le_iff_ge_upperSet e c], hc‚ÇÅ‚ü©

          ¬∑ rintro ‚ü®e, c, hc‚ÇÄ, he‚ÇÄ, he'‚ÇÄ, c'_le_e', hc'‚ÇÄ‚ü©
            use e; use c;
            exact ‚ü®‚ü®hc‚ÇÄ, hc'‚ÇÄ‚ü©, he‚ÇÄ, he'‚ÇÄ, by rwa [le_iff_ge_upperSet e c]‚ü©
        _ ‚Üî ‚àÉ (e: D) (he: e ‚àà ùïÇ D), e·µò ‚äÜ u ‚àß x (open_of_compact e he) := by
          constructor
          ¬∑ rintro ‚ü®e, c, hc‚ÇÄ, he‚ÇÄ, he'‚ÇÄ, c'_le_e', hc'‚ÇÄ‚ü©
            use e; use he‚ÇÄ; use he'‚ÇÄ
            let cU := (open_of_compact c hc‚ÇÄ)
            let eU := (open_of_compact e he‚ÇÄ)
            have foo : cU ‚äì eU = cU := by simpa [open_of_compact, cU, eU]
            have bar : x (cU ‚äì eU) = x cU := by simp_all
            simp [map_sSup] at bar
            exact bar hc'‚ÇÄ
          ¬∑ -- the reverse direction is a bit silly as the requirements for c are all satisfied by e itself
            intro ‚ü®e, he‚ÇÄ, he'‚ÇÄ, he'‚ÇÅ‚ü©
            use e; use e; use he‚ÇÄ;
        _ ‚Üî x u := by
          constructor
          ¬∑ let P (o: Opens D) := ‚àÉ (c: D) (hc: c ‚àà ùïÇ D), c ‚àà u ‚àß (o = (open_of_compact c hc))
            -- intro he
            rintro ‚ü®e, he‚ÇÄ, he'‚ÇÄ, he'‚ÇÅ‚ü©
            have he': ‚àÉ u, P u ‚àß x u := by
              use (open_of_compact e he‚ÇÄ)
              exact ‚ü®‚ü®e, he‚ÇÄ, mem_iff_upSet_subset.2 he'‚ÇÄ, rfl‚ü©, he'‚ÇÅ‚ü©

            rw [‚Üê of_completelyPrime] at he'
            rw [‚Üê open_eq_open_of_basis' u] at he'
            exact he'
          ¬∑ intro hu
            rw [open_eq_open_of_basis' u] at hu
            rw [of_completelyPrime] at hu

            obtain ‚ü®e', ‚ü®e, he‚ÇÄ, he'‚ÇÄ, he'‚ÇÅ‚ü© , he'‚ÇÇ‚ü© := hu
            rw [he'‚ÇÅ] at he'‚ÇÇ
            exact ‚ü®e, he‚ÇÄ, mem_iff_upSet_subset.1 he'‚ÇÄ, he'‚ÇÇ‚ü©

/--
      let openSet := Opens.carrier '' { y | x y}
      have openSetIsOpen : ‚àÄ u ‚àà openSet, IsOpen u := by
        intro u hu
        rw [Set.mem_image] at hu
        sorry

      -- This will be a frame homomorphism it's just a forgetful one should be trivial to construct
      have homOS : FrameHom (Set D) (Opens D) := sorry
      let x' : CompletelyPrimeFilter D := mkPrimeFilter (x.comp homOS)
      -- simp only [Functor.id_obj, Functor.comp_obj, topToLocale_obj]

      -- The join of `K‚Çì` is to be shown as the input mapping to `x`
      let K‚Çì := K x'.sets
      -- We first need to show that K is directed: see InformalProof.txt
      have IsDirected : DirectedOn (¬∑ ‚â§ ¬∑) K‚Çì := by
        intro c hc d hd

        let c' := upperSet c
        let d' := upperSet d
        have h_inf' : c' ‚à© d' ‚àà x'.sets := x'.inter_sets hc.2 hd.2
        have inf_as_sup := constructOpenFromCompact' (c' ‚à© d') (by apply openSetIsOpen; exact h_inter')
        have h_inf'' : ‚ãÉ‚ÇÄ {x | ‚àÉ c_1 ‚àà c' ‚à© d' ‚à© ùïÇ D, upperSet c_1 = x} ‚àà x'.sets := by
          rwa [inf_as_sup] at h_inf'
        choose e' he'‚ÇÄ he'‚ÇÅ using (x'.prime h_inf'')
        dsimp only [Set.mem_inter_iff, Set.mem_setOf_eq] at he'‚ÇÄ
        choose e he‚ÇÄ hee' using he'‚ÇÄ
        obtain ‚ü®‚ü®e_in_c', e_in_d'‚ü©, he_compact‚ü© := he‚ÇÄ
        have e_in_K‚Çì : e ‚àà K‚Çì := by
          dsimp only [Set.mem_setOf_eq, K‚Çì]
          constructor
          ¬∑ -- e ‚àà ùïÇ D
            exact he_compact
          ¬∑ -- upperSet e ‚àà x'.sets
            rw [hee']
            exact he'‚ÇÅ
        use e
        constructor
        ¬∑ -- e ‚àà K‚Çì
          exact e_in_K‚Çì
        constructor
        ¬∑ -- e ‚â§ c
          dsimp only [K‚Çì]
          exact e_in_c'
        ¬∑ dsimp only [K‚Çì]
          exact e_in_d'
      have sSup_is_LUB := CompletePartialOrder.lubOfDirected K‚Çì IsDirected
      use sSup K‚Çì
      let foo :=  localePointOfSpacePoint D (sSup K‚Çì)
      let foo' := {u: Opens D | localePointOfSpacePoint D (sSup K‚Çì) u}
      -- simp? [localePointOfSpacePoint] at foo' -- does nothing useful
      sorry
-/
